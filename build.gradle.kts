import java.text.SimpleDateFormat
import java.util.*

plugins {
    id("eclipse")
    id("idea")
    id("maven-publish")
    id("net.neoforged.moddev").version("0.1.99")
    //id("org.parchmentmc.librarian.forgegradle").version("1.+")
    //id("org.spongepowered.mixin")
}

version = "${property("minecraft_version")}-${property("mod_version")}"
if (System.getenv("BUILD_NUMBER") != null) {
    version = "${property("loader_version")}-${property("mod_version")}.${System.getenv("BUILD_NUMBER")}"
}
group = modGroupId

val baseArchivesName = modId
base {
    archivesName.set(baseArchivesName)
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(modJavaVersion))
    }
}

neoForge {
    parchment {
        mappingsVersion = "${property("parchment_mappings_version")}"
        minecraftVersion = "${property("parchment_minecraft_version")}"
    }

    accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))

    copyIdeResources.set(true)
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory(project.file("run"))

            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            mods {
                create("${modId}") {
                    source(sourceSets.main.get())
                }
            }
        }

        create("client") {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property("forge.enabledGameTestNamespaces", modId)
            arg("-mixin.config=" + modId + ".mixins.json")
        }

        create("server") {
            property("forge.enabledGameTestNamespaces", modId)
            args("--nogui")
            arg("-mixin.config=" + modId + ".mixins.json")
        }

        create("data") {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory(project.file("run-data"))

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args(
                    "--mod",
                    modId,
                    "--all",
                    "--output",
                    file("src/generated/resources/"),
                    "--existing",
                    file("src/main/resources/")
            )
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources.srcDir("src/generated/resources")
    }
}

repositories {
    mavenCentral()
    maven {
        name = "Curios maven"
        url = uri("https://maven.theillusivec4.top/")
        content {
            includeGroupByRegex("top\\.theillusivec4.*")
        }
    }
    maven {
        name = "JEI maven"
        url = uri("https://dvs1.progwml6.com/files/maven")
    }
    maven {
        name = "tterrag maven"
        url = uri("https://maven.tterrag.com/")
    }
    maven {
        name = "BlameJared maven"
        url = uri("https://maven.blamejared.com/")
    }
    maven {
        name = "Curse Maven"
        url = uri("https://cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}")

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:${mixinVersion}:processor")
    }

    // JEI Dependency
//    compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jeiVersion}"))
//    compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jeiVersion}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jeiVersion}"))

    // Curios dependency
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}"))

//    implementation(fg.deobf("com.sammy.malum:malum:${minecraftVersion}-1.6.72"))
}

tasks.withType<ProcessResources> {
    inputs.property("version", version)

    filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
        expand(
                mapOf(
                        "forgeVersionRange" to forgeVersionRange,
                        "loaderVersionRange" to loaderVersionRange,
                        "minecraftVersion" to minecraftVersion,
                        "minecraftVersionRange" to minecraftVersionRange,
                        "modAuthors" to modAuthors,
                        "modDescription" to modDescription,
                        "modId" to modId,
                        "modJavaVersion" to modJavaVersion,
                        "modName" to modName,
                        "modVersion" to version,
                        "modLicense" to modLicense
                )
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType<Jar> {
    val now = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
    manifest {
        attributes(mapOf(
                "Specification-Title" to modName,
                "Specification-Vendor" to modAuthors,
                "Specification-Version" to '1',
                "Implementation-Title" to modName,
                "Implementation-Version" to version,
                "Implementation-Vendor" to modAuthors,
                "Implementation-Timestamp" to now,
        ))
    }
    finalizedBy("reobfJar")
}

publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            artifactId = baseArchivesName
            from(components["java"])
            fg.component(this)
        }
    }
    repositories {
        maven {
            url = uri("file://${System.getenv("local_maven")}")
        }
    }
}

idea {
    module {
        for (fileName in listOf("run", "out", "logs")) {
            excludeDirs.add(file(fileName))
        }
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}